/**
 * 基础服务位于基础层。为各层提供资源服务（如数据库、缓存等），实现各层的解耦，降低外部资源变化对业务逻辑的影响。
 * 基础服务主要为仓储服务，通过依赖反转的方式为各层提供基础资源服务，领域服务和应用服务调用仓储服务接口，利用仓储实现持久化数据对象或直接访问基础资源。
 *
 * 该处比较重要的点就是依赖反转，基础设施层主要提供仓储服务，做数据存储。正常情况下应该是domain层需要调用仓储层的数据，同时仓储层需要保存一些domain层的数据，会产生依赖domain层的数据对象。
 * 这样就出现了循环依赖，解决办法是采用依赖反转设计原则，依赖与抽象不依赖于具体。domain需要试用仓储服务，那么定义仓储接口，充血模型的设计；同时仓储层依赖接口，去具体实现接口的处理。解决了循环依赖的问题。
 *
 * dao主要是mybatis的mapper层用于po对象的交互，直接同数据库交互
 * po主要是table的表映射对象
 * repository仓储层（领域层仓储接口实现具体实现类），主要是用户做业务交互仓储服务，将领域层的业务聚合对象或其他业务对象转换为po对象，与dao层数据库交互。
 * util作为redis操作缓存服务
 */